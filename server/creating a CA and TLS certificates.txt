openssl x509 -req -in server.csr -CA RNP_CA.crt -CAkey RNP_CA.key -CAcreateserial -out server.crt -sha256

step 1: Generate a private key:
openssl genrsa -des3 -out myCA.key 2048

step2: generate a root certificate (This is actually our CA. Our CA is just a certificate.
):
openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem

step3:
Add our CAs certificate to every device we will need to be accepting certificates generated by this CA.

step4:
Create a private key:
openssl genrsa -out dev.deliciousbrains.com.key 2048

step5:
Createa a Certificate Signing Request
openssl req -new -key dev.deliciousbrains.com.key -out dev.deliciousbrains.com.csr

step6:
Create a config file (create a text file named dev.deliciousbrains.com.ext with the contents below):
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = dev.deliciousbrains.com

step7:
Create the certificate using the CA previously created, the CSR, and the config file:
openssl x509 -req -in dev.deliciousbrains.com.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial -out dev.deliciousbrains.com.crt -days 825 -sha256 -extfile dev.deliciousbrains.com.ext

finding_out a certificate's expiration date:
openssl x509 -enddate -noout -in path/to/.crt/or/.pem/file

inspecting whole certificate:
openssl x509 -text -in /path/to/certificate -noout



